# How to create branchs..?
# How to merge a devlop branch to main useing pull requests..?
# Git reset and git revert..?
# How to create a new branch from a specific commit..?

What is the defalut branch in git..?
    - The default branch in Git is typically `master`. This is the branch that is created automatically when you initialize a new Git repository.

1. git branch <branch name>: create new branch
2. git branch : list of branchs

3. git branch -a: Lists all local and remote branches.
4. git branch -r: Lists all remote branches.

5. git switch <branch name>: Switch the branch
check the branch name ^ git branch

6. git checkout <branch name>: Switch the branch
check the branch name ^ git branch

7. git branch -d <branch name>: Deletes a local branch, even if it's not fully merged. The branch must be fully merged in its upstream branch, or in HEAD.

8. git branch -D <branch name>: Deletes a local branch, even if it's not fully merged.

# How to merge a devlop branch to main useing pull requests..?

* Step 1: Create a Pull Request:
      - Go to your repository on GitHub and click on the "New pull request" button.
      - Select the development branch (e.g. dev) as the "head" branch and the main branch (e.g. main) as the "base" branch.
      - Click on the "Create pull request" button.

* Step 2: Review the Pull Request:
      - The pull request will be created and will be visible in the "Pull requests" tab of your repository.
      - Review the changes made in the development branch by clicking on the "Files changed" tab.
      - Check for any conflicts or issues with the changes.

* Step 3: Approve the Pull Request:
      - If the changes look good, click on the "Merge pull request" button.
      - If there are any conflicts, resolve them before merging the pull request.
      - After merging the pull request, the development branch will be merged into the main branch.
      - The pull request will be closed and the changes will be visible in the main branch.

* Step 4: Merge the Pull Request:
      - Once the pull request is approved, click on the "Merge pull request" button.
      - Select the merge method:
        - "Merge commit" will create a new merge commit that combines the changes from the development branch into the main branch.
        - "Squash and merge" will squash all the commits from the development branch into a single commit and then merge it into the main branch.
        - "Rebase and merge" will rebase the development branch onto the main branch and then merge it.
       - Click on the "Confirm merge" button to complete the merge.

---

Step 4: Delete the Branch..?
        - After merging the development branch into the main branch, you can delete the development branch.
        - To delete the development branch, go to the "Branches" tab of your repository and click on the "Delete branch" button next to the development branch.
        - Confirm the deletion by clicking on the "Delete branch" button again.
        - The development branch will be deleted and will no longer be visible in the "Branches" tab of your repository.

* Step 5: Update the Main Branch:
      - After merging the development branch into the main branch, you may need to update the main branch with the latest changes from the development branch.
      - To update the main branch, go to the "Branches" tab of your repository and click on the "Update branch" button next to the main branch.
      - Select the development branch as the "source" branch and the main branch as the "destination" branch.
      - Click on the "Update branch" button to complete the update.
      - The main branch will be updated with the latest changes from the development branch.

* Step 6: Push the Changes to the Remote Repository:
      - After merging the development branch into the main branch and updating the main branch, you need to push the changes to the remote repository.
      - To push the changes to the remote repository, go to the "Commits" tab of your repository and click on the "Push" button.
      - Select the main branch as the "source" branch and the remote repository as the "destination" branch.
      - Click on the "Push" button to complete the push.
      - The changes will be pushed to the remote repository and will be visible to other users.

* Step 7: Verify the Changes:
      - After pushing the changes to the remote repository, you can verify that the changes have been merged into the main branch and are visible to other users.
      - To verify the changes, go to the "Commits" tab of your repository and check the commits made to the main branch.
      - You can also check the changes made to the main branch by going to the "Files changed" tab of your repository.
      - If you have any questions or issues with the changes, you can contact the repository owner or the development team for assistance.

* Step 8: Close the Pull Request

* Step 9: Delete the Pull Request

* Step 10: Update the Main Branch

* Step 11: Push the Changes to the Remote Repository

1. git branch -m <branch name>: Renames a local branch.

2. git branch -M <branch name>: Renames a local branch, even if it's not fully merged.

3. git branch -v: Lists all local branches, with the commit hash and commit message for each branch.

4. git branch -vv: Lists all local branches, with the commit hash and commit message for
each branch, as well as the upstream branch for each branch.

# Git reset and git revert..?

git reset --soft <commit id>
      --> this will not change the file content but it will change the commit id.
      --> this commit id will not change inside the file content & what commit id will give that is the latest.

git reset --hard <commit id>
      --> this will change inside the file content, latest commit will delete.
      --> this will delete the latest commit.
      --> this will delete the latest commit & file content.

git reset --mixed <commit id>
      --> this will change the commit id & file content.

git revert <commit id>
      --> this will create a new commit id & file content.
      --> this will create a new commit id & file content & it will not delete the latest commit

git revert --no-commit <commit id>
      --> this will create a new commit id & file content & it will not create a new commit

git revert --no-edit <commit id>
      --> this will create a new commit id & file content & it will not create a new commit &
it will not create a new commit id.

git revert --no-commit --no-edit <commit id>
      --> this will create a new commit id & file content & it will not create a new commit
& it will not create a new commit id.

git revert --no-commit --no-edit --no-verify <commit id>
      --> this will create a new commit id & file content & it will not create a new commit
& it will not create a new commit id & it will not create a new commit id.

git revert --no-commit --no-edit --no-verify --no-pager <commit id>
git revert --no-commit --no-edit --no-verify --no-pager --no-stat <commit id>